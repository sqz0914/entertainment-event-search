{"version":3,"file":"round-progress.service.d.ts","sources":["round-progress.service.d.ts"],"names":[],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["export declare class RoundProgressService {\r\n    private base;\r\n    private hasPerf;\r\n    supportsSvg: boolean;\r\n    constructor(document: any);\r\n    /**\r\n     * Resolves a SVG color against the page's `base` tag.\r\n     */\r\n    resolveColor(color: string): string;\r\n    /**\r\n     * Generates a timestamp.\r\n     */\r\n    getTimestamp(): number;\r\n    /**\r\n     * Generates the value for an SVG arc.\r\n     * @param current       Current value.\r\n     * @param total         Maximum value.\r\n     * @param pathRadius    Radius of the SVG path.\r\n     * @param elementRadius Radius of the SVG container.\r\n     * @param isSemicircle  Whether the element should be a semicircle.\r\n     */\r\n    getArc(current: number, total: number, pathRadius: number, elementRadius: number, isSemicircle?: boolean): string;\r\n    /**\r\n     * Converts polar cooradinates to Cartesian.\r\n     * @param elementRadius  Radius of the wrapper element.\r\n     * @param pathRadius     Radius of the path being described.\r\n     * @param angleInDegrees Degree to be converted.\r\n     */\r\n    private _polarToCartesian;\r\n}\r\n"]}