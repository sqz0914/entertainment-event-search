{"version":3,"file":"round-progress.component.d.ts","sources":["round-progress.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnChanges, NgZone, EventEmitter, ElementRef, SimpleChanges } from '@angular/core';\r\nimport { RoundProgressService } from './round-progress.service';\r\nimport { RoundProgressDefaults } from './round-progress.config';\r\nimport { RoundProgressEase } from './round-progress.ease';\r\nexport declare class RoundProgressComponent implements OnChanges {\r\n    private service;\r\n    private easing;\r\n    private defaults;\r\n    private ngZone;\r\n    private currentLinecap;\r\n    /** Reference to the underlying `path` node. */\r\n    path: ElementRef<SVGPathElement>;\r\n    /** Current value of the progress bar. */\r\n    current: number;\r\n    /** Maximum value of the progress bar. */\r\n    max: number;\r\n    /** Radius of the circle. */\r\n    radius: number;\r\n    /** Name of the easing function to use when animating. */\r\n    animation: string;\r\n    /** Time in millisconds by which to delay the animation. */\r\n    animationDelay: number;\r\n    /** Duration of the animation. */\r\n    duration: number;\r\n    /** Width of the circle's stroke. */\r\n    stroke: number;\r\n    /** Color of the circle. */\r\n    color: string;\r\n    /** Background color of the circle. */\r\n    background: string;\r\n    /** Whether the circle should take up the width of its parent. */\r\n    responsive: boolean;\r\n    /** Whether the circle is filling up clockwise. */\r\n    clockwise: boolean;\r\n    /** Whether to render a semicircle. */\r\n    semicircle: boolean;\r\n    /** Whether the tip of the progress should be rounded off. */\r\n    rounded: boolean;\r\n    /** Emits when a new value has been rendered. */\r\n    onRender: EventEmitter<number>;\r\n    private lastAnimationId;\r\n    constructor(service: RoundProgressService, easing: RoundProgressEase, defaults: RoundProgressDefaults, ngZone: NgZone);\r\n    /** Animates a change in the current value. */\r\n    private _animateChange;\r\n    /** Updates the path apperance. */\r\n    private _updatePath;\r\n    /** Clamps a value between the maximum and 0. */\r\n    private _clamp;\r\n    /** Determines the SVG transforms for the <path> node. */\r\n    getPathTransform(): string;\r\n    /** Resolves a color through the service. */\r\n    resolveColor(color: string): string;\r\n    /** Change detection callback. */\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    /** Diameter of the circle. */\r\n    _getDiameter(): number;\r\n    /** The CSS height of the wrapper element. */\r\n    _getElementHeight(): string;\r\n    /** Viewbox for the SVG element. */\r\n    _getViewBox(): string;\r\n    /** Bottom padding for the wrapper element. */\r\n    _getPaddingBottom(): string;\r\n}\r\n"]}